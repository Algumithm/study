import java.util.*;

class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        PriorityQueue<Integer> q=new PriorityQueue<>();
        
        for(int i=0;i<scoville.length;i++){
            q.offer(scoville[i]);
        }
        
        int first;
        int second;
        int scov;
      if(q.peek()>=K){  //처음부터 모든경우가 k이상일때
                return answer;
            }  
        
        while(!q.isEmpty()){
                    
            if(q.size()==1){
                if(q.poll()>=K)
                    return answer;
                else
                    return -1;
            }
            first=q.poll();
            second=q.poll();
            answer++;
            q.offer(first+second*2);
            for(int j=0;j<q.size();j++){
                scov=q.poll();
                if(scov<K){ //제일작은게 k보다 작다면    
                    q.offer(scov);
                    break;
                }else{ //제일작은게 k보다 크거나 같다면
                    return answer;
                    
                }
            }
            
            
            
        }
        
        
        return answer;
    }
}
/* version2
import java.util.*;

class Solution {
    public int solution(int[] scoville, int K) {
        int answer = 0;
        PriorityQueue<Integer> q=new PriorityQueue<>();
        
        for(int i=0;i<scoville.length;i++){
            q.offer(scoville[i]);
        }
        
        int first;
        int second;
        int scov;
          
        
        while(q.size()>1){
            if(q.peek()>=K){
                return answer;
            }
            
            first=q.poll();
            second=q.poll();
            answer++;
            q.offer(first+second*2);

            
            
            
        }
        return q.peek()>=K?answer:-1;

    }
}
    
 */
