import java.util.Scanner;

public class pratice1 {
    public static final int DIR_NUM = 4;
    public static final int MAX_NUM = 100;
    
    public static int n;
    public static int[][] grid = new int[MAX_NUM][MAX_NUM];
    public static boolean[][] visited = new boolean[MAX_NUM][MAX_NUM];
    
    public static int maxBlock;
    public static int bombCnt;
    
    public static int currBlockNum;
    
    
    public static boolean inRange(int x, int y) {
        return x >= 0 && x < n && y >= 0 && y < n;
    }
    
   
    public static boolean canGo(int x, int y, int color) {
        if(!inRange(x, y))
            return false;
    
        if(visited[x][y] || grid[x][y] != color)
            return false;
    
        return true;
    }
    
    public static void DFS(int x, int y) {
        
        int[] dx = new int[]{0, 1, 0, -1};
        int[] dy = new int[]{1, 0, -1, 0};
    
      
        for(int dir = 0; dir < DIR_NUM; dir++) {
            int newX = x + dx[dir];
            int newY = y + dy[dir];
    
            if(canGo(newX, newY, grid[x][y])){
                visited[newX][newY] = true;
               
                currBlockNum++;
                DFS(newX, newY);
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                grid[i][j] = sc.nextInt();

        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(!visited[i][j] && grid[i][j] > 0) {
                   
                    visited[i][j] = true;
                    currBlockNum = 1;
                    
                    DFS(i, j);

                  
                    if(currBlockNum >= 4)
                        bombCnt++;
                    
                    maxBlock = Math.max(maxBlock, currBlockNum);
                }
            }
        }
        
        System.out.print(bombCnt + " " + maxBlock);
    }
}
